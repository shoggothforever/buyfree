// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"buyfree/repo/model"
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFactory(db *gorm.DB, opts ...gen.DOOption) factory {
	_factory := factory{}

	_factory.factoryDo.UseDB(db, opts...)
	_factory.factoryDo.UseModel(&model.Factory{})

	tableName := _factory.factoryDo.TableName()
	_factory.ALL = field.NewAsterisk(tableName)
	_factory.ID = field.NewInt64(tableName, "id")
	_factory.CreatedAt = field.NewTime(tableName, "created_at")
	_factory.UpdatedAt = field.NewTime(tableName, "updated_at")
	_factory.DeletedAt = field.NewField(tableName, "deleted_at")
	_factory.Balance = field.NewFloat64(tableName, "balance")
	_factory.Pic = field.NewString(tableName, "pic")
	_factory.Name = field.NewString(tableName, "name")
	_factory.Password = field.NewString(tableName, "password")
	_factory.Mobile = field.NewString(tableName, "mobile")
	_factory.IDCard = field.NewString(tableName, "id_card")
	_factory.Role = field.NewInt(tableName, "role")
	_factory.Level = field.NewInt(tableName, "level")
	_factory.PasswordSalt = field.NewString(tableName, "password_salt")
	_factory.Address = field.NewString(tableName, "address")
	_factory.Products = factoryHasManyProducts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Products", "model.FactoryProduct"),
	}

	_factory.OrderForms = factoryHasManyOrderForms{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("OrderForms", "model.DriverOrderForm"),
		ProductInfo: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("OrderForms.ProductInfo", "model.OrderProduct"),
		},
	}

	_factory.fillFieldMap()

	return _factory
}

type factory struct {
	factoryDo

	ALL          field.Asterisk
	ID           field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	Balance      field.Float64
	Pic          field.String
	Name         field.String
	Password     field.String
	Mobile       field.String
	IDCard       field.String
	Role         field.Int
	Level        field.Int
	PasswordSalt field.String
	Address      field.String
	Products     factoryHasManyProducts

	OrderForms factoryHasManyOrderForms

	fieldMap map[string]field.Expr
}

func (f factory) Table(newTableName string) *factory {
	f.factoryDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f factory) As(alias string) *factory {
	f.factoryDo.DO = *(f.factoryDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *factory) updateTableName(table string) *factory {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")
	f.Balance = field.NewFloat64(table, "balance")
	f.Pic = field.NewString(table, "pic")
	f.Name = field.NewString(table, "name")
	f.Password = field.NewString(table, "password")
	f.Mobile = field.NewString(table, "mobile")
	f.IDCard = field.NewString(table, "id_card")
	f.Role = field.NewInt(table, "role")
	f.Level = field.NewInt(table, "level")
	f.PasswordSalt = field.NewString(table, "password_salt")
	f.Address = field.NewString(table, "address")

	f.fillFieldMap()

	return f
}

func (f *factory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *factory) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 16)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
	f.fieldMap["balance"] = f.Balance
	f.fieldMap["pic"] = f.Pic
	f.fieldMap["name"] = f.Name
	f.fieldMap["password"] = f.Password
	f.fieldMap["mobile"] = f.Mobile
	f.fieldMap["id_card"] = f.IDCard
	f.fieldMap["role"] = f.Role
	f.fieldMap["level"] = f.Level
	f.fieldMap["password_salt"] = f.PasswordSalt
	f.fieldMap["address"] = f.Address

}

func (f factory) clone(db *gorm.DB) factory {
	f.factoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f factory) replaceDB(db *gorm.DB) factory {
	f.factoryDo.ReplaceDB(db)
	return f
}

type factoryHasManyProducts struct {
	db *gorm.DB

	field.RelationField
}

func (a factoryHasManyProducts) Where(conds ...field.Expr) *factoryHasManyProducts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a factoryHasManyProducts) WithContext(ctx context.Context) *factoryHasManyProducts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a factoryHasManyProducts) Model(m *model.Factory) *factoryHasManyProductsTx {
	return &factoryHasManyProductsTx{a.db.Model(m).Association(a.Name())}
}

type factoryHasManyProductsTx struct{ tx *gorm.Association }

func (a factoryHasManyProductsTx) Find() (result []*model.FactoryProduct, err error) {
	return result, a.tx.Find(&result)
}

func (a factoryHasManyProductsTx) Append(values ...*model.FactoryProduct) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a factoryHasManyProductsTx) Replace(values ...*model.FactoryProduct) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a factoryHasManyProductsTx) Delete(values ...*model.FactoryProduct) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a factoryHasManyProductsTx) Clear() error {
	return a.tx.Clear()
}

func (a factoryHasManyProductsTx) Count() int64 {
	return a.tx.Count()
}

type factoryHasManyOrderForms struct {
	db *gorm.DB

	field.RelationField

	ProductInfo struct {
		field.RelationField
	}
}

func (a factoryHasManyOrderForms) Where(conds ...field.Expr) *factoryHasManyOrderForms {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a factoryHasManyOrderForms) WithContext(ctx context.Context) *factoryHasManyOrderForms {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a factoryHasManyOrderForms) Model(m *model.Factory) *factoryHasManyOrderFormsTx {
	return &factoryHasManyOrderFormsTx{a.db.Model(m).Association(a.Name())}
}

type factoryHasManyOrderFormsTx struct{ tx *gorm.Association }

func (a factoryHasManyOrderFormsTx) Find() (result []*model.DriverOrderForm, err error) {
	return result, a.tx.Find(&result)
}

func (a factoryHasManyOrderFormsTx) Append(values ...*model.DriverOrderForm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a factoryHasManyOrderFormsTx) Replace(values ...*model.DriverOrderForm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a factoryHasManyOrderFormsTx) Delete(values ...*model.DriverOrderForm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a factoryHasManyOrderFormsTx) Clear() error {
	return a.tx.Clear()
}

func (a factoryHasManyOrderFormsTx) Count() int64 {
	return a.tx.Count()
}

type factoryDo struct{ gen.DO }

type IFactoryDo interface {
	gen.SubQuery
	Debug() IFactoryDo
	WithContext(ctx context.Context) IFactoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFactoryDo
	WriteDB() IFactoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFactoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFactoryDo
	Not(conds ...gen.Condition) IFactoryDo
	Or(conds ...gen.Condition) IFactoryDo
	Select(conds ...field.Expr) IFactoryDo
	Where(conds ...gen.Condition) IFactoryDo
	Order(conds ...field.Expr) IFactoryDo
	Distinct(cols ...field.Expr) IFactoryDo
	Omit(cols ...field.Expr) IFactoryDo
	Join(table schema.Tabler, on ...field.Expr) IFactoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFactoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFactoryDo
	Group(cols ...field.Expr) IFactoryDo
	Having(conds ...gen.Condition) IFactoryDo
	Limit(limit int) IFactoryDo
	Offset(offset int) IFactoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFactoryDo
	Unscoped() IFactoryDo
	Create(values ...*model.Factory) error
	CreateInBatches(values []*model.Factory, batchSize int) error
	Save(values ...*model.Factory) error
	First() (*model.Factory, error)
	Take() (*model.Factory, error)
	Last() (*model.Factory, error)
	Find() ([]*model.Factory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Factory, err error)
	FindInBatches(result *[]*model.Factory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Factory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFactoryDo
	Assign(attrs ...field.AssignExpr) IFactoryDo
	Joins(fields ...field.RelationField) IFactoryDo
	Preload(fields ...field.RelationField) IFactoryDo
	FirstOrInit() (*model.Factory, error)
	FirstOrCreate() (*model.Factory, error)
	FindByPage(offset int, limit int) (result []*model.Factory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFactoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result model.Factory, err error)
	GetByName(id int64) (result model.Factory, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (f factoryDo) GetByID(id int64) (result model.Factory, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM factories WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE name=@id
func (f factoryDo) GetByName(id int64) (result model.Factory, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM factories WHERE name=? ")

	var executeSQL *gorm.DB
	executeSQL = f.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (f factoryDo) Debug() IFactoryDo {
	return f.withDO(f.DO.Debug())
}

func (f factoryDo) WithContext(ctx context.Context) IFactoryDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f factoryDo) ReadDB() IFactoryDo {
	return f.Clauses(dbresolver.Read)
}

func (f factoryDo) WriteDB() IFactoryDo {
	return f.Clauses(dbresolver.Write)
}

func (f factoryDo) Session(config *gorm.Session) IFactoryDo {
	return f.withDO(f.DO.Session(config))
}

func (f factoryDo) Clauses(conds ...clause.Expression) IFactoryDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f factoryDo) Returning(value interface{}, columns ...string) IFactoryDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f factoryDo) Not(conds ...gen.Condition) IFactoryDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f factoryDo) Or(conds ...gen.Condition) IFactoryDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f factoryDo) Select(conds ...field.Expr) IFactoryDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f factoryDo) Where(conds ...gen.Condition) IFactoryDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f factoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFactoryDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f factoryDo) Order(conds ...field.Expr) IFactoryDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f factoryDo) Distinct(cols ...field.Expr) IFactoryDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f factoryDo) Omit(cols ...field.Expr) IFactoryDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f factoryDo) Join(table schema.Tabler, on ...field.Expr) IFactoryDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f factoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFactoryDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f factoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IFactoryDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f factoryDo) Group(cols ...field.Expr) IFactoryDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f factoryDo) Having(conds ...gen.Condition) IFactoryDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f factoryDo) Limit(limit int) IFactoryDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f factoryDo) Offset(offset int) IFactoryDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f factoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFactoryDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f factoryDo) Unscoped() IFactoryDo {
	return f.withDO(f.DO.Unscoped())
}

func (f factoryDo) Create(values ...*model.Factory) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f factoryDo) CreateInBatches(values []*model.Factory, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f factoryDo) Save(values ...*model.Factory) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f factoryDo) First() (*model.Factory, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Factory), nil
	}
}

func (f factoryDo) Take() (*model.Factory, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Factory), nil
	}
}

func (f factoryDo) Last() (*model.Factory, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Factory), nil
	}
}

func (f factoryDo) Find() ([]*model.Factory, error) {
	result, err := f.DO.Find()
	return result.([]*model.Factory), err
}

func (f factoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Factory, err error) {
	buf := make([]*model.Factory, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f factoryDo) FindInBatches(result *[]*model.Factory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f factoryDo) Attrs(attrs ...field.AssignExpr) IFactoryDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f factoryDo) Assign(attrs ...field.AssignExpr) IFactoryDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f factoryDo) Joins(fields ...field.RelationField) IFactoryDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f factoryDo) Preload(fields ...field.RelationField) IFactoryDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f factoryDo) FirstOrInit() (*model.Factory, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Factory), nil
	}
}

func (f factoryDo) FirstOrCreate() (*model.Factory, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Factory), nil
	}
}

func (f factoryDo) FindByPage(offset int, limit int) (result []*model.Factory, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f factoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f factoryDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f factoryDo) Delete(models ...*model.Factory) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *factoryDo) withDO(do gen.Dao) *factoryDo {
	f.DO = *do.(*gen.DO)
	return f
}
