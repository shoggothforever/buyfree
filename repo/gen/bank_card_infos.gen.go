// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"buyfree/repo/model"
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newBankCardInfo(db *gorm.DB, opts ...gen.DOOption) bankCardInfo {
	_bankCardInfo := bankCardInfo{}

	_bankCardInfo.bankCardInfoDo.UseDB(db, opts...)
	_bankCardInfo.bankCardInfoDo.UseModel(&model.BankCardInfo{})

	tableName := _bankCardInfo.bankCardInfoDo.TableName()
	_bankCardInfo.ALL = field.NewAsterisk(tableName)
	_bankCardInfo.ID = field.NewInt64(tableName, "id")
	_bankCardInfo.CardID = field.NewInt64(tableName, "card_id")
	_bankCardInfo.BankName = field.NewString(tableName, "bank_name")
	_bankCardInfo.Password = field.NewString(tableName, "password")
	_bankCardInfo.Cash = field.NewFloat64(tableName, "cash")
	_bankCardInfo.BankFund = field.NewFloat64(tableName, "bank_fund")

	_bankCardInfo.fillFieldMap()

	return _bankCardInfo
}

type bankCardInfo struct {
	bankCardInfoDo

	ALL      field.Asterisk
	ID       field.Int64
	CardID   field.Int64
	BankName field.String
	Password field.String
	Cash     field.Float64
	BankFund field.Float64

	fieldMap map[string]field.Expr
}

func (b bankCardInfo) Table(newTableName string) *bankCardInfo {
	b.bankCardInfoDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bankCardInfo) As(alias string) *bankCardInfo {
	b.bankCardInfoDo.DO = *(b.bankCardInfoDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bankCardInfo) updateTableName(table string) *bankCardInfo {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.CardID = field.NewInt64(table, "card_id")
	b.BankName = field.NewString(table, "bank_name")
	b.Password = field.NewString(table, "password")
	b.Cash = field.NewFloat64(table, "cash")
	b.BankFund = field.NewFloat64(table, "bank_fund")

	b.fillFieldMap()

	return b
}

func (b *bankCardInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bankCardInfo) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 6)
	b.fieldMap["id"] = b.ID
	b.fieldMap["card_id"] = b.CardID
	b.fieldMap["bank_name"] = b.BankName
	b.fieldMap["password"] = b.Password
	b.fieldMap["cash"] = b.Cash
	b.fieldMap["bank_fund"] = b.BankFund
}

func (b bankCardInfo) clone(db *gorm.DB) bankCardInfo {
	b.bankCardInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bankCardInfo) replaceDB(db *gorm.DB) bankCardInfo {
	b.bankCardInfoDo.ReplaceDB(db)
	return b
}

type bankCardInfoDo struct{ gen.DO }

type IBankCardInfoDo interface {
	gen.SubQuery
	Debug() IBankCardInfoDo
	WithContext(ctx context.Context) IBankCardInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBankCardInfoDo
	WriteDB() IBankCardInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBankCardInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBankCardInfoDo
	Not(conds ...gen.Condition) IBankCardInfoDo
	Or(conds ...gen.Condition) IBankCardInfoDo
	Select(conds ...field.Expr) IBankCardInfoDo
	Where(conds ...gen.Condition) IBankCardInfoDo
	Order(conds ...field.Expr) IBankCardInfoDo
	Distinct(cols ...field.Expr) IBankCardInfoDo
	Omit(cols ...field.Expr) IBankCardInfoDo
	Join(table schema.Tabler, on ...field.Expr) IBankCardInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBankCardInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBankCardInfoDo
	Group(cols ...field.Expr) IBankCardInfoDo
	Having(conds ...gen.Condition) IBankCardInfoDo
	Limit(limit int) IBankCardInfoDo
	Offset(offset int) IBankCardInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBankCardInfoDo
	Unscoped() IBankCardInfoDo
	Create(values ...*model.BankCardInfo) error
	CreateInBatches(values []*model.BankCardInfo, batchSize int) error
	Save(values ...*model.BankCardInfo) error
	First() (*model.BankCardInfo, error)
	Take() (*model.BankCardInfo, error)
	Last() (*model.BankCardInfo, error)
	Find() ([]*model.BankCardInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BankCardInfo, err error)
	FindInBatches(result *[]*model.BankCardInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BankCardInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBankCardInfoDo
	Assign(attrs ...field.AssignExpr) IBankCardInfoDo
	Joins(fields ...field.RelationField) IBankCardInfoDo
	Preload(fields ...field.RelationField) IBankCardInfoDo
	FirstOrInit() (*model.BankCardInfo, error)
	FirstOrCreate() (*model.BankCardInfo, error)
	FindByPage(offset int, limit int) (result []*model.BankCardInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBankCardInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result model.BankCardInfo, err error)
	GetByName(id int64) (result model.BankCardInfo, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (b bankCardInfoDo) GetByID(id int64) (result model.BankCardInfo, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM bank_card_infos WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE name=@id
func (b bankCardInfoDo) GetByName(id int64) (result model.BankCardInfo, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM bank_card_infos WHERE name=? ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (b bankCardInfoDo) Debug() IBankCardInfoDo {
	return b.withDO(b.DO.Debug())
}

func (b bankCardInfoDo) WithContext(ctx context.Context) IBankCardInfoDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bankCardInfoDo) ReadDB() IBankCardInfoDo {
	return b.Clauses(dbresolver.Read)
}

func (b bankCardInfoDo) WriteDB() IBankCardInfoDo {
	return b.Clauses(dbresolver.Write)
}

func (b bankCardInfoDo) Session(config *gorm.Session) IBankCardInfoDo {
	return b.withDO(b.DO.Session(config))
}

func (b bankCardInfoDo) Clauses(conds ...clause.Expression) IBankCardInfoDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bankCardInfoDo) Returning(value interface{}, columns ...string) IBankCardInfoDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bankCardInfoDo) Not(conds ...gen.Condition) IBankCardInfoDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bankCardInfoDo) Or(conds ...gen.Condition) IBankCardInfoDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bankCardInfoDo) Select(conds ...field.Expr) IBankCardInfoDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bankCardInfoDo) Where(conds ...gen.Condition) IBankCardInfoDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bankCardInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IBankCardInfoDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b bankCardInfoDo) Order(conds ...field.Expr) IBankCardInfoDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bankCardInfoDo) Distinct(cols ...field.Expr) IBankCardInfoDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bankCardInfoDo) Omit(cols ...field.Expr) IBankCardInfoDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bankCardInfoDo) Join(table schema.Tabler, on ...field.Expr) IBankCardInfoDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bankCardInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBankCardInfoDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bankCardInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IBankCardInfoDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bankCardInfoDo) Group(cols ...field.Expr) IBankCardInfoDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bankCardInfoDo) Having(conds ...gen.Condition) IBankCardInfoDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bankCardInfoDo) Limit(limit int) IBankCardInfoDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bankCardInfoDo) Offset(offset int) IBankCardInfoDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bankCardInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBankCardInfoDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bankCardInfoDo) Unscoped() IBankCardInfoDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bankCardInfoDo) Create(values ...*model.BankCardInfo) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bankCardInfoDo) CreateInBatches(values []*model.BankCardInfo, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bankCardInfoDo) Save(values ...*model.BankCardInfo) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bankCardInfoDo) First() (*model.BankCardInfo, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankCardInfo), nil
	}
}

func (b bankCardInfoDo) Take() (*model.BankCardInfo, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankCardInfo), nil
	}
}

func (b bankCardInfoDo) Last() (*model.BankCardInfo, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankCardInfo), nil
	}
}

func (b bankCardInfoDo) Find() ([]*model.BankCardInfo, error) {
	result, err := b.DO.Find()
	return result.([]*model.BankCardInfo), err
}

func (b bankCardInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BankCardInfo, err error) {
	buf := make([]*model.BankCardInfo, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bankCardInfoDo) FindInBatches(result *[]*model.BankCardInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bankCardInfoDo) Attrs(attrs ...field.AssignExpr) IBankCardInfoDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bankCardInfoDo) Assign(attrs ...field.AssignExpr) IBankCardInfoDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bankCardInfoDo) Joins(fields ...field.RelationField) IBankCardInfoDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bankCardInfoDo) Preload(fields ...field.RelationField) IBankCardInfoDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bankCardInfoDo) FirstOrInit() (*model.BankCardInfo, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankCardInfo), nil
	}
}

func (b bankCardInfoDo) FirstOrCreate() (*model.BankCardInfo, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BankCardInfo), nil
	}
}

func (b bankCardInfoDo) FindByPage(offset int, limit int) (result []*model.BankCardInfo, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bankCardInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bankCardInfoDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bankCardInfoDo) Delete(models ...*model.BankCardInfo) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bankCardInfoDo) withDO(do gen.Dao) *bankCardInfoDo {
	b.DO = *do.(*gen.DO)
	return b
}
