// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"buyfree/repo/model"
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newOrderProduct(db *gorm.DB, opts ...gen.DOOption) orderProduct {
	_orderProduct := orderProduct{}

	_orderProduct.orderProductDo.UseDB(db, opts...)
	_orderProduct.orderProductDo.UseModel(&model.OrderProduct{})

	tableName := _orderProduct.orderProductDo.TableName()
	_orderProduct.ALL = field.NewAsterisk(tableName)
	_orderProduct.CartRefer = field.NewInt64(tableName, "cart_refer")
	_orderProduct.FactoryRefer = field.NewInt64(tableName, "factory_refer")
	_orderProduct.OrderRefer = field.NewString(tableName, "order_refer")
	_orderProduct.IsChosen = field.NewBool(tableName, "is_chosen")
	_orderProduct.Name = field.NewString(tableName, "name")
	_orderProduct.Pic = field.NewString(tableName, "pic")
	_orderProduct.Type = field.NewString(tableName, "type")
	_orderProduct.Count_ = field.NewInt64(tableName, "count")
	_orderProduct.Prize = field.NewFloat64(tableName, "prize")

	_orderProduct.fillFieldMap()

	return _orderProduct
}

type orderProduct struct {
	orderProductDo

	ALL          field.Asterisk
	CartRefer    field.Int64
	FactoryRefer field.Int64
	OrderRefer   field.String
	IsChosen     field.Bool
	Name         field.String
	Pic          field.String
	Type         field.String
	Count_       field.Int64
	Prize        field.Float64

	fieldMap map[string]field.Expr
}

func (o orderProduct) Table(newTableName string) *orderProduct {
	o.orderProductDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderProduct) As(alias string) *orderProduct {
	o.orderProductDo.DO = *(o.orderProductDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderProduct) updateTableName(table string) *orderProduct {
	o.ALL = field.NewAsterisk(table)
	o.CartRefer = field.NewInt64(table, "cart_refer")
	o.FactoryRefer = field.NewInt64(table, "factory_refer")
	o.OrderRefer = field.NewString(table, "order_refer")
	o.IsChosen = field.NewBool(table, "is_chosen")
	o.Name = field.NewString(table, "name")
	o.Pic = field.NewString(table, "pic")
	o.Type = field.NewString(table, "type")
	o.Count_ = field.NewInt64(table, "count")
	o.Prize = field.NewFloat64(table, "prize")

	o.fillFieldMap()

	return o
}

func (o *orderProduct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderProduct) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 9)
	o.fieldMap["cart_refer"] = o.CartRefer
	o.fieldMap["factory_refer"] = o.FactoryRefer
	o.fieldMap["order_refer"] = o.OrderRefer
	o.fieldMap["is_chosen"] = o.IsChosen
	o.fieldMap["name"] = o.Name
	o.fieldMap["pic"] = o.Pic
	o.fieldMap["type"] = o.Type
	o.fieldMap["count"] = o.Count_
	o.fieldMap["prize"] = o.Prize
}

func (o orderProduct) clone(db *gorm.DB) orderProduct {
	o.orderProductDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderProduct) replaceDB(db *gorm.DB) orderProduct {
	o.orderProductDo.ReplaceDB(db)
	return o
}

type orderProductDo struct{ gen.DO }

type IOrderProductDo interface {
	gen.SubQuery
	Debug() IOrderProductDo
	WithContext(ctx context.Context) IOrderProductDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderProductDo
	WriteDB() IOrderProductDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderProductDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderProductDo
	Not(conds ...gen.Condition) IOrderProductDo
	Or(conds ...gen.Condition) IOrderProductDo
	Select(conds ...field.Expr) IOrderProductDo
	Where(conds ...gen.Condition) IOrderProductDo
	Order(conds ...field.Expr) IOrderProductDo
	Distinct(cols ...field.Expr) IOrderProductDo
	Omit(cols ...field.Expr) IOrderProductDo
	Join(table schema.Tabler, on ...field.Expr) IOrderProductDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderProductDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderProductDo
	Group(cols ...field.Expr) IOrderProductDo
	Having(conds ...gen.Condition) IOrderProductDo
	Limit(limit int) IOrderProductDo
	Offset(offset int) IOrderProductDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderProductDo
	Unscoped() IOrderProductDo
	Create(values ...*model.OrderProduct) error
	CreateInBatches(values []*model.OrderProduct, batchSize int) error
	Save(values ...*model.OrderProduct) error
	First() (*model.OrderProduct, error)
	Take() (*model.OrderProduct, error)
	Last() (*model.OrderProduct, error)
	Find() ([]*model.OrderProduct, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderProduct, err error)
	FindInBatches(result *[]*model.OrderProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrderProduct) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderProductDo
	Assign(attrs ...field.AssignExpr) IOrderProductDo
	Joins(fields ...field.RelationField) IOrderProductDo
	Preload(fields ...field.RelationField) IOrderProductDo
	FirstOrInit() (*model.OrderProduct, error)
	FirstOrCreate() (*model.OrderProduct, error)
	FindByPage(offset int, limit int) (result []*model.OrderProduct, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderProductDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetAllDeviceProduct(deviceid int64) (result []model.OrderProduct, err error)
	GetAllOrderProductReferDCart(cartrefer int64) (result []model.OrderProduct, err error)
	GetAllOrderProductReferPCart(cartrefer int64) (result []model.OrderProduct, err error)
	GetAllOrderProductReferFactory(factoryrefer int64) (result []model.OrderProduct, err error)
	GetAllOrderProductReferDOrder(orderrefer string) (result []model.OrderProduct, err error)
	GetAllOrderProductReferPOrder(orderrefer string) (result []model.OrderProduct, err error)
}

// sql(SELECT * FROM @@table where @deviceid=(SELECT id from devices where id=@deviceid))
func (o orderProductDo) GetAllDeviceProduct(deviceid int64) (result []model.OrderProduct, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, deviceid)
	params = append(params, deviceid)
	generateSQL.WriteString("SELECT * FROM order_products where ?=(SELECT id from devices where id=?) ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(SELECT * FROM @@table where @cartrefer=(SELECT cart_id from driver_carts where cart_id=@cartrefer))
func (o orderProductDo) GetAllOrderProductReferDCart(cartrefer int64) (result []model.OrderProduct, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, cartrefer)
	params = append(params, cartrefer)
	generateSQL.WriteString("SELECT * FROM order_products where ?=(SELECT cart_id from driver_carts where cart_id=?) ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(SELECT * FROM @@table where @cartrefer=(SELECT cart_id from passenger_carts where cart_id=@cartrefer))
func (o orderProductDo) GetAllOrderProductReferPCart(cartrefer int64) (result []model.OrderProduct, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, cartrefer)
	params = append(params, cartrefer)
	generateSQL.WriteString("SELECT * FROM order_products where ?=(SELECT cart_id from passenger_carts where cart_id=?) ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(SELECT * FROM @@table where @factoryrefer=(SELECT id from factories where id=@factoryrefer))
func (o orderProductDo) GetAllOrderProductReferFactory(factoryrefer int64) (result []model.OrderProduct, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, factoryrefer)
	params = append(params, factoryrefer)
	generateSQL.WriteString("SELECT * FROM order_products where ?=(SELECT id from factories where id=?) ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(SELECT * FROM @@table where @orderrefer=(SELECT order_id from driver_order_forms where order_id=@orderrefer))
func (o orderProductDo) GetAllOrderProductReferDOrder(orderrefer string) (result []model.OrderProduct, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, orderrefer)
	params = append(params, orderrefer)
	generateSQL.WriteString("SELECT * FROM order_products where ?=(SELECT order_id from driver_order_forms where order_id=?) ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(SELECT * FROM @@table where @orderrefer=(SELECT order_id from passenger_order_forms where order_id=@orderrefer))
func (o orderProductDo) GetAllOrderProductReferPOrder(orderrefer string) (result []model.OrderProduct, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, orderrefer)
	params = append(params, orderrefer)
	generateSQL.WriteString("SELECT * FROM order_products where ?=(SELECT order_id from passenger_order_forms where order_id=?) ")

	var executeSQL *gorm.DB
	executeSQL = o.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (o orderProductDo) Debug() IOrderProductDo {
	return o.withDO(o.DO.Debug())
}

func (o orderProductDo) WithContext(ctx context.Context) IOrderProductDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderProductDo) ReadDB() IOrderProductDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderProductDo) WriteDB() IOrderProductDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderProductDo) Session(config *gorm.Session) IOrderProductDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderProductDo) Clauses(conds ...clause.Expression) IOrderProductDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderProductDo) Returning(value interface{}, columns ...string) IOrderProductDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderProductDo) Not(conds ...gen.Condition) IOrderProductDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderProductDo) Or(conds ...gen.Condition) IOrderProductDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderProductDo) Select(conds ...field.Expr) IOrderProductDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderProductDo) Where(conds ...gen.Condition) IOrderProductDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderProductDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOrderProductDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o orderProductDo) Order(conds ...field.Expr) IOrderProductDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderProductDo) Distinct(cols ...field.Expr) IOrderProductDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderProductDo) Omit(cols ...field.Expr) IOrderProductDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderProductDo) Join(table schema.Tabler, on ...field.Expr) IOrderProductDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderProductDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderProductDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderProductDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderProductDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderProductDo) Group(cols ...field.Expr) IOrderProductDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderProductDo) Having(conds ...gen.Condition) IOrderProductDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderProductDo) Limit(limit int) IOrderProductDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderProductDo) Offset(offset int) IOrderProductDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderProductDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderProductDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderProductDo) Unscoped() IOrderProductDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderProductDo) Create(values ...*model.OrderProduct) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderProductDo) CreateInBatches(values []*model.OrderProduct, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderProductDo) Save(values ...*model.OrderProduct) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderProductDo) First() (*model.OrderProduct, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderProduct), nil
	}
}

func (o orderProductDo) Take() (*model.OrderProduct, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderProduct), nil
	}
}

func (o orderProductDo) Last() (*model.OrderProduct, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderProduct), nil
	}
}

func (o orderProductDo) Find() ([]*model.OrderProduct, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderProduct), err
}

func (o orderProductDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderProduct, err error) {
	buf := make([]*model.OrderProduct, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderProductDo) FindInBatches(result *[]*model.OrderProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderProductDo) Attrs(attrs ...field.AssignExpr) IOrderProductDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderProductDo) Assign(attrs ...field.AssignExpr) IOrderProductDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderProductDo) Joins(fields ...field.RelationField) IOrderProductDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderProductDo) Preload(fields ...field.RelationField) IOrderProductDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderProductDo) FirstOrInit() (*model.OrderProduct, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderProduct), nil
	}
}

func (o orderProductDo) FirstOrCreate() (*model.OrderProduct, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderProduct), nil
	}
}

func (o orderProductDo) FindByPage(offset int, limit int) (result []*model.OrderProduct, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderProductDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderProductDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderProductDo) Delete(models ...*model.OrderProduct) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderProductDo) withDO(do gen.Dao) *orderProductDo {
	o.DO = *do.(*gen.DO)
	return o
}
