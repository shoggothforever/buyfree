// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"buyfree/repo/model"
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newDeviceProduct(db *gorm.DB, opts ...gen.DOOption) deviceProduct {
	_deviceProduct := deviceProduct{}

	_deviceProduct.deviceProductDo.UseDB(db, opts...)
	_deviceProduct.deviceProductDo.UseModel(&model.DeviceProduct{})

	tableName := _deviceProduct.deviceProductDo.TableName()
	_deviceProduct.ALL = field.NewAsterisk(tableName)
	_deviceProduct.ID = field.NewInt64(tableName, "id")
	_deviceProduct.Inventory = field.NewInt64(tableName, "inventory")
	_deviceProduct.MonthlySales = field.NewInt64(tableName, "monthly_sales")
	_deviceProduct.FactoryRefer = field.NewString(tableName, "factory_refer")
	_deviceProduct.Sku = field.NewString(tableName, "sku")
	_deviceProduct.Name = field.NewString(tableName, "name")
	_deviceProduct.Pic = field.NewString(tableName, "pic")
	_deviceProduct.Type = field.NewString(tableName, "type")
	_deviceProduct.BuyPrize = field.NewFloat64(tableName, "buy_prize")
	_deviceProduct.SupplyPrize = field.NewFloat64(tableName, "supply_prize")
	_deviceProduct.DeviceID = field.NewInt64(tableName, "device_id")

	_deviceProduct.fillFieldMap()

	return _deviceProduct
}

type deviceProduct struct {
	deviceProductDo

	ALL          field.Asterisk
	ID           field.Int64
	Inventory    field.Int64
	MonthlySales field.Int64
	FactoryRefer field.String
	Sku          field.String
	Name         field.String
	Pic          field.String
	Type         field.String
	BuyPrize     field.Float64
	SupplyPrize  field.Float64
	DeviceID     field.Int64

	fieldMap map[string]field.Expr
}

func (d deviceProduct) Table(newTableName string) *deviceProduct {
	d.deviceProductDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deviceProduct) As(alias string) *deviceProduct {
	d.deviceProductDo.DO = *(d.deviceProductDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deviceProduct) updateTableName(table string) *deviceProduct {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Inventory = field.NewInt64(table, "inventory")
	d.MonthlySales = field.NewInt64(table, "monthly_sales")
	d.FactoryRefer = field.NewString(table, "factory_refer")
	d.Sku = field.NewString(table, "sku")
	d.Name = field.NewString(table, "name")
	d.Pic = field.NewString(table, "pic")
	d.Type = field.NewString(table, "type")
	d.BuyPrize = field.NewFloat64(table, "buy_prize")
	d.SupplyPrize = field.NewFloat64(table, "supply_prize")
	d.DeviceID = field.NewInt64(table, "device_id")

	d.fillFieldMap()

	return d
}

func (d *deviceProduct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deviceProduct) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["id"] = d.ID
	d.fieldMap["inventory"] = d.Inventory
	d.fieldMap["monthly_sales"] = d.MonthlySales
	d.fieldMap["factory_refer"] = d.FactoryRefer
	d.fieldMap["sku"] = d.Sku
	d.fieldMap["name"] = d.Name
	d.fieldMap["pic"] = d.Pic
	d.fieldMap["type"] = d.Type
	d.fieldMap["buy_prize"] = d.BuyPrize
	d.fieldMap["supply_prize"] = d.SupplyPrize
	d.fieldMap["device_id"] = d.DeviceID
}

func (d deviceProduct) clone(db *gorm.DB) deviceProduct {
	d.deviceProductDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deviceProduct) replaceDB(db *gorm.DB) deviceProduct {
	d.deviceProductDo.ReplaceDB(db)
	return d
}

type deviceProductDo struct{ gen.DO }

type IDeviceProductDo interface {
	gen.SubQuery
	Debug() IDeviceProductDo
	WithContext(ctx context.Context) IDeviceProductDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeviceProductDo
	WriteDB() IDeviceProductDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeviceProductDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeviceProductDo
	Not(conds ...gen.Condition) IDeviceProductDo
	Or(conds ...gen.Condition) IDeviceProductDo
	Select(conds ...field.Expr) IDeviceProductDo
	Where(conds ...gen.Condition) IDeviceProductDo
	Order(conds ...field.Expr) IDeviceProductDo
	Distinct(cols ...field.Expr) IDeviceProductDo
	Omit(cols ...field.Expr) IDeviceProductDo
	Join(table schema.Tabler, on ...field.Expr) IDeviceProductDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceProductDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeviceProductDo
	Group(cols ...field.Expr) IDeviceProductDo
	Having(conds ...gen.Condition) IDeviceProductDo
	Limit(limit int) IDeviceProductDo
	Offset(offset int) IDeviceProductDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceProductDo
	Unscoped() IDeviceProductDo
	Create(values ...*model.DeviceProduct) error
	CreateInBatches(values []*model.DeviceProduct, batchSize int) error
	Save(values ...*model.DeviceProduct) error
	First() (*model.DeviceProduct, error)
	Take() (*model.DeviceProduct, error)
	Last() (*model.DeviceProduct, error)
	Find() ([]*model.DeviceProduct, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeviceProduct, err error)
	FindInBatches(result *[]*model.DeviceProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeviceProduct) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeviceProductDo
	Assign(attrs ...field.AssignExpr) IDeviceProductDo
	Joins(fields ...field.RelationField) IDeviceProductDo
	Preload(fields ...field.RelationField) IDeviceProductDo
	FirstOrInit() (*model.DeviceProduct, error)
	FirstOrCreate() (*model.DeviceProduct, error)
	FindByPage(offset int, limit int) (result []*model.DeviceProduct, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeviceProductDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result model.DeviceProduct, err error)
	GetByName(id int64) (result model.DeviceProduct, err error)
	GetAllDeviceProduct(deviceid int64) (result []model.DeviceProduct, err error)
	GetAllOrderProductReferDCart(cartrefer int64) (result []model.DeviceProduct, err error)
	GetAllOrderProductReferPCart(cartrefer int64) (result []model.DeviceProduct, err error)
	GetAllOrderProductReferFactory(factoryrefer int64) (result []model.DeviceProduct, err error)
	GetAllOrderProductReferDOrder(orderrefer string) (result []model.DeviceProduct, err error)
	GetAllOrderProductReferPOrder(orderrefer string) (result []model.DeviceProduct, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (d deviceProductDo) GetByID(id int64) (result model.DeviceProduct, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM device_products WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE name=@id
func (d deviceProductDo) GetByName(id int64) (result model.DeviceProduct, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM device_products WHERE name=? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(SELECT * FROM @@table where @deviceid=(SELECT id from devices where id=@deviceid))
func (d deviceProductDo) GetAllDeviceProduct(deviceid int64) (result []model.DeviceProduct, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, deviceid)
	params = append(params, deviceid)
	generateSQL.WriteString("SELECT * FROM device_products where ?=(SELECT id from devices where id=?) ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(SELECT * FROM @@table where @cartrefer=(SELECT cart_id from driver_carts where cart_id=@cartrefer))
func (d deviceProductDo) GetAllOrderProductReferDCart(cartrefer int64) (result []model.DeviceProduct, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, cartrefer)
	params = append(params, cartrefer)
	generateSQL.WriteString("SELECT * FROM device_products where ?=(SELECT cart_id from driver_carts where cart_id=?) ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(SELECT * FROM @@table where @cartrefer=(SELECT cart_id from passenger_carts where cart_id=@cartrefer))
func (d deviceProductDo) GetAllOrderProductReferPCart(cartrefer int64) (result []model.DeviceProduct, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, cartrefer)
	params = append(params, cartrefer)
	generateSQL.WriteString("SELECT * FROM device_products where ?=(SELECT cart_id from passenger_carts where cart_id=?) ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(SELECT * FROM @@table where @factoryrefer=(SELECT id from factories where id=@factoryrefer))
func (d deviceProductDo) GetAllOrderProductReferFactory(factoryrefer int64) (result []model.DeviceProduct, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, factoryrefer)
	params = append(params, factoryrefer)
	generateSQL.WriteString("SELECT * FROM device_products where ?=(SELECT id from factories where id=?) ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(SELECT * FROM @@table where @orderrefer=(SELECT order_id from driver_order_forms where order_id=@orderrefer))
func (d deviceProductDo) GetAllOrderProductReferDOrder(orderrefer string) (result []model.DeviceProduct, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, orderrefer)
	params = append(params, orderrefer)
	generateSQL.WriteString("SELECT * FROM device_products where ?=(SELECT order_id from driver_order_forms where order_id=?) ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(SELECT * FROM @@table where @orderrefer=(SELECT order_id from passenger_order_forms where order_id=@orderrefer))
func (d deviceProductDo) GetAllOrderProductReferPOrder(orderrefer string) (result []model.DeviceProduct, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, orderrefer)
	params = append(params, orderrefer)
	generateSQL.WriteString("SELECT * FROM device_products where ?=(SELECT order_id from passenger_order_forms where order_id=?) ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (d deviceProductDo) Debug() IDeviceProductDo {
	return d.withDO(d.DO.Debug())
}

func (d deviceProductDo) WithContext(ctx context.Context) IDeviceProductDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deviceProductDo) ReadDB() IDeviceProductDo {
	return d.Clauses(dbresolver.Read)
}

func (d deviceProductDo) WriteDB() IDeviceProductDo {
	return d.Clauses(dbresolver.Write)
}

func (d deviceProductDo) Session(config *gorm.Session) IDeviceProductDo {
	return d.withDO(d.DO.Session(config))
}

func (d deviceProductDo) Clauses(conds ...clause.Expression) IDeviceProductDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deviceProductDo) Returning(value interface{}, columns ...string) IDeviceProductDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deviceProductDo) Not(conds ...gen.Condition) IDeviceProductDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deviceProductDo) Or(conds ...gen.Condition) IDeviceProductDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deviceProductDo) Select(conds ...field.Expr) IDeviceProductDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deviceProductDo) Where(conds ...gen.Condition) IDeviceProductDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deviceProductDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDeviceProductDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d deviceProductDo) Order(conds ...field.Expr) IDeviceProductDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deviceProductDo) Distinct(cols ...field.Expr) IDeviceProductDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deviceProductDo) Omit(cols ...field.Expr) IDeviceProductDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deviceProductDo) Join(table schema.Tabler, on ...field.Expr) IDeviceProductDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deviceProductDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceProductDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deviceProductDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeviceProductDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deviceProductDo) Group(cols ...field.Expr) IDeviceProductDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deviceProductDo) Having(conds ...gen.Condition) IDeviceProductDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deviceProductDo) Limit(limit int) IDeviceProductDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deviceProductDo) Offset(offset int) IDeviceProductDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deviceProductDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceProductDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deviceProductDo) Unscoped() IDeviceProductDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deviceProductDo) Create(values ...*model.DeviceProduct) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deviceProductDo) CreateInBatches(values []*model.DeviceProduct, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deviceProductDo) Save(values ...*model.DeviceProduct) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deviceProductDo) First() (*model.DeviceProduct, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceProduct), nil
	}
}

func (d deviceProductDo) Take() (*model.DeviceProduct, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceProduct), nil
	}
}

func (d deviceProductDo) Last() (*model.DeviceProduct, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceProduct), nil
	}
}

func (d deviceProductDo) Find() ([]*model.DeviceProduct, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeviceProduct), err
}

func (d deviceProductDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeviceProduct, err error) {
	buf := make([]*model.DeviceProduct, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deviceProductDo) FindInBatches(result *[]*model.DeviceProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deviceProductDo) Attrs(attrs ...field.AssignExpr) IDeviceProductDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deviceProductDo) Assign(attrs ...field.AssignExpr) IDeviceProductDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deviceProductDo) Joins(fields ...field.RelationField) IDeviceProductDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deviceProductDo) Preload(fields ...field.RelationField) IDeviceProductDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deviceProductDo) FirstOrInit() (*model.DeviceProduct, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceProduct), nil
	}
}

func (d deviceProductDo) FirstOrCreate() (*model.DeviceProduct, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceProduct), nil
	}
}

func (d deviceProductDo) FindByPage(offset int, limit int) (result []*model.DeviceProduct, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deviceProductDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deviceProductDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deviceProductDo) Delete(models ...*model.DeviceProduct) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deviceProductDo) withDO(do gen.Dao) *deviceProductDo {
	d.DO = *do.(*gen.DO)
	return d
}
