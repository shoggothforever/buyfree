// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"buyfree/repo/model"
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newLoginInfo(db *gorm.DB, opts ...gen.DOOption) loginInfo {
	_loginInfo := loginInfo{}

	_loginInfo.loginInfoDo.UseDB(db, opts...)
	_loginInfo.loginInfoDo.UseModel(&model.LoginInfo{})

	tableName := _loginInfo.loginInfoDo.TableName()
	_loginInfo.ALL = field.NewAsterisk(tableName)
	_loginInfo.UserID = field.NewInt64(tableName, "user_id")
	_loginInfo.Password = field.NewString(tableName, "password")
	_loginInfo.Salt = field.NewString(tableName, "salt")
	_loginInfo.Jwt = field.NewString(tableName, "jwt")

	_loginInfo.fillFieldMap()

	return _loginInfo
}

type loginInfo struct {
	loginInfoDo

	ALL      field.Asterisk
	UserID   field.Int64
	Password field.String
	Salt     field.String
	Jwt      field.String

	fieldMap map[string]field.Expr
}

func (l loginInfo) Table(newTableName string) *loginInfo {
	l.loginInfoDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l loginInfo) As(alias string) *loginInfo {
	l.loginInfoDo.DO = *(l.loginInfoDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *loginInfo) updateTableName(table string) *loginInfo {
	l.ALL = field.NewAsterisk(table)
	l.UserID = field.NewInt64(table, "user_id")
	l.Password = field.NewString(table, "password")
	l.Salt = field.NewString(table, "salt")
	l.Jwt = field.NewString(table, "jwt")

	l.fillFieldMap()

	return l
}

func (l *loginInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *loginInfo) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 4)
	l.fieldMap["user_id"] = l.UserID
	l.fieldMap["password"] = l.Password
	l.fieldMap["salt"] = l.Salt
	l.fieldMap["jwt"] = l.Jwt
}

func (l loginInfo) clone(db *gorm.DB) loginInfo {
	l.loginInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l loginInfo) replaceDB(db *gorm.DB) loginInfo {
	l.loginInfoDo.ReplaceDB(db)
	return l
}

type loginInfoDo struct{ gen.DO }

type ILoginInfoDo interface {
	gen.SubQuery
	Debug() ILoginInfoDo
	WithContext(ctx context.Context) ILoginInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILoginInfoDo
	WriteDB() ILoginInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILoginInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILoginInfoDo
	Not(conds ...gen.Condition) ILoginInfoDo
	Or(conds ...gen.Condition) ILoginInfoDo
	Select(conds ...field.Expr) ILoginInfoDo
	Where(conds ...gen.Condition) ILoginInfoDo
	Order(conds ...field.Expr) ILoginInfoDo
	Distinct(cols ...field.Expr) ILoginInfoDo
	Omit(cols ...field.Expr) ILoginInfoDo
	Join(table schema.Tabler, on ...field.Expr) ILoginInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILoginInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILoginInfoDo
	Group(cols ...field.Expr) ILoginInfoDo
	Having(conds ...gen.Condition) ILoginInfoDo
	Limit(limit int) ILoginInfoDo
	Offset(offset int) ILoginInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILoginInfoDo
	Unscoped() ILoginInfoDo
	Create(values ...*model.LoginInfo) error
	CreateInBatches(values []*model.LoginInfo, batchSize int) error
	Save(values ...*model.LoginInfo) error
	First() (*model.LoginInfo, error)
	Take() (*model.LoginInfo, error)
	Last() (*model.LoginInfo, error)
	Find() ([]*model.LoginInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LoginInfo, err error)
	FindInBatches(result *[]*model.LoginInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LoginInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILoginInfoDo
	Assign(attrs ...field.AssignExpr) ILoginInfoDo
	Joins(fields ...field.RelationField) ILoginInfoDo
	Preload(fields ...field.RelationField) ILoginInfoDo
	FirstOrInit() (*model.LoginInfo, error)
	FirstOrCreate() (*model.LoginInfo, error)
	FindByPage(offset int, limit int) (result []*model.LoginInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILoginInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByNameAndPsw(uid int64, psw string) (result model.LoginInfo, err error)
}

// SELECT * FROM @@table WHERE user_id=@uid and password=@psw
func (l loginInfoDo) GetByNameAndPsw(uid int64, psw string) (result model.LoginInfo, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uid)
	params = append(params, psw)
	generateSQL.WriteString("SELECT * FROM login_infos WHERE user_id=? and password=? ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (l loginInfoDo) Debug() ILoginInfoDo {
	return l.withDO(l.DO.Debug())
}

func (l loginInfoDo) WithContext(ctx context.Context) ILoginInfoDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l loginInfoDo) ReadDB() ILoginInfoDo {
	return l.Clauses(dbresolver.Read)
}

func (l loginInfoDo) WriteDB() ILoginInfoDo {
	return l.Clauses(dbresolver.Write)
}

func (l loginInfoDo) Session(config *gorm.Session) ILoginInfoDo {
	return l.withDO(l.DO.Session(config))
}

func (l loginInfoDo) Clauses(conds ...clause.Expression) ILoginInfoDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l loginInfoDo) Returning(value interface{}, columns ...string) ILoginInfoDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l loginInfoDo) Not(conds ...gen.Condition) ILoginInfoDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l loginInfoDo) Or(conds ...gen.Condition) ILoginInfoDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l loginInfoDo) Select(conds ...field.Expr) ILoginInfoDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l loginInfoDo) Where(conds ...gen.Condition) ILoginInfoDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l loginInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILoginInfoDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l loginInfoDo) Order(conds ...field.Expr) ILoginInfoDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l loginInfoDo) Distinct(cols ...field.Expr) ILoginInfoDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l loginInfoDo) Omit(cols ...field.Expr) ILoginInfoDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l loginInfoDo) Join(table schema.Tabler, on ...field.Expr) ILoginInfoDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l loginInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILoginInfoDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l loginInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ILoginInfoDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l loginInfoDo) Group(cols ...field.Expr) ILoginInfoDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l loginInfoDo) Having(conds ...gen.Condition) ILoginInfoDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l loginInfoDo) Limit(limit int) ILoginInfoDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l loginInfoDo) Offset(offset int) ILoginInfoDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l loginInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILoginInfoDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l loginInfoDo) Unscoped() ILoginInfoDo {
	return l.withDO(l.DO.Unscoped())
}

func (l loginInfoDo) Create(values ...*model.LoginInfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l loginInfoDo) CreateInBatches(values []*model.LoginInfo, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l loginInfoDo) Save(values ...*model.LoginInfo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l loginInfoDo) First() (*model.LoginInfo, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginInfo), nil
	}
}

func (l loginInfoDo) Take() (*model.LoginInfo, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginInfo), nil
	}
}

func (l loginInfoDo) Last() (*model.LoginInfo, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginInfo), nil
	}
}

func (l loginInfoDo) Find() ([]*model.LoginInfo, error) {
	result, err := l.DO.Find()
	return result.([]*model.LoginInfo), err
}

func (l loginInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LoginInfo, err error) {
	buf := make([]*model.LoginInfo, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l loginInfoDo) FindInBatches(result *[]*model.LoginInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l loginInfoDo) Attrs(attrs ...field.AssignExpr) ILoginInfoDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l loginInfoDo) Assign(attrs ...field.AssignExpr) ILoginInfoDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l loginInfoDo) Joins(fields ...field.RelationField) ILoginInfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l loginInfoDo) Preload(fields ...field.RelationField) ILoginInfoDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l loginInfoDo) FirstOrInit() (*model.LoginInfo, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginInfo), nil
	}
}

func (l loginInfoDo) FirstOrCreate() (*model.LoginInfo, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginInfo), nil
	}
}

func (l loginInfoDo) FindByPage(offset int, limit int) (result []*model.LoginInfo, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l loginInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l loginInfoDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l loginInfoDo) Delete(models ...*model.LoginInfo) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *loginInfoDo) withDO(do gen.Dao) *loginInfoDo {
	l.DO = *do.(*gen.DO)
	return l
}
