// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"buyfree/repo/model"
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAdvertisement(db *gorm.DB, opts ...gen.DOOption) advertisement {
	_advertisement := advertisement{}

	_advertisement.advertisementDo.UseDB(db, opts...)
	_advertisement.advertisementDo.UseModel(&model.Advertisement{})

	tableName := _advertisement.advertisementDo.TableName()
	_advertisement.ALL = field.NewAsterisk(tableName)
	_advertisement.ID = field.NewInt64(tableName, "id")
	_advertisement.Description = field.NewString(tableName, "description")
	_advertisement.PlatformID = field.NewInt64(tableName, "platform_id")
	_advertisement.ExpectedPlayTimes = field.NewInt64(tableName, "expected_play_times")
	_advertisement.NowPlayTimes = field.NewInt64(tableName, "now_play_times")
	_advertisement.InvestFund = field.NewFloat64(tableName, "invest_fund")
	_advertisement.Profie = field.NewFloat64(tableName, "profie")
	_advertisement.ADOwner = field.NewString(tableName, "ad_owner")
	_advertisement.PlayUrl = field.NewString(tableName, "play_url")
	_advertisement.ExpireAt = field.NewTime(tableName, "expire_at")
	_advertisement.ADState = field.NewInt(tableName, "ad_state")

	_advertisement.fillFieldMap()

	return _advertisement
}

type advertisement struct {
	advertisementDo

	ALL               field.Asterisk
	ID                field.Int64
	Description       field.String
	PlatformID        field.Int64
	ExpectedPlayTimes field.Int64
	NowPlayTimes      field.Int64
	InvestFund        field.Float64
	Profie            field.Float64
	ADOwner           field.String
	PlayUrl           field.String
	ExpireAt          field.Time
	ADState           field.Int

	fieldMap map[string]field.Expr
}

func (a advertisement) Table(newTableName string) *advertisement {
	a.advertisementDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a advertisement) As(alias string) *advertisement {
	a.advertisementDo.DO = *(a.advertisementDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *advertisement) updateTableName(table string) *advertisement {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Description = field.NewString(table, "description")
	a.PlatformID = field.NewInt64(table, "platform_id")
	a.ExpectedPlayTimes = field.NewInt64(table, "expected_play_times")
	a.NowPlayTimes = field.NewInt64(table, "now_play_times")
	a.InvestFund = field.NewFloat64(table, "invest_fund")
	a.Profie = field.NewFloat64(table, "profie")
	a.ADOwner = field.NewString(table, "ad_owner")
	a.PlayUrl = field.NewString(table, "play_url")
	a.ExpireAt = field.NewTime(table, "expire_at")
	a.ADState = field.NewInt(table, "ad_state")

	a.fillFieldMap()

	return a
}

func (a *advertisement) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *advertisement) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["description"] = a.Description
	a.fieldMap["platform_id"] = a.PlatformID
	a.fieldMap["expected_play_times"] = a.ExpectedPlayTimes
	a.fieldMap["now_play_times"] = a.NowPlayTimes
	a.fieldMap["invest_fund"] = a.InvestFund
	a.fieldMap["profie"] = a.Profie
	a.fieldMap["ad_owner"] = a.ADOwner
	a.fieldMap["play_url"] = a.PlayUrl
	a.fieldMap["expire_at"] = a.ExpireAt
	a.fieldMap["ad_state"] = a.ADState
}

func (a advertisement) clone(db *gorm.DB) advertisement {
	a.advertisementDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a advertisement) replaceDB(db *gorm.DB) advertisement {
	a.advertisementDo.ReplaceDB(db)
	return a
}

type advertisementDo struct{ gen.DO }

type IAdvertisementDo interface {
	gen.SubQuery
	Debug() IAdvertisementDo
	WithContext(ctx context.Context) IAdvertisementDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdvertisementDo
	WriteDB() IAdvertisementDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdvertisementDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdvertisementDo
	Not(conds ...gen.Condition) IAdvertisementDo
	Or(conds ...gen.Condition) IAdvertisementDo
	Select(conds ...field.Expr) IAdvertisementDo
	Where(conds ...gen.Condition) IAdvertisementDo
	Order(conds ...field.Expr) IAdvertisementDo
	Distinct(cols ...field.Expr) IAdvertisementDo
	Omit(cols ...field.Expr) IAdvertisementDo
	Join(table schema.Tabler, on ...field.Expr) IAdvertisementDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdvertisementDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdvertisementDo
	Group(cols ...field.Expr) IAdvertisementDo
	Having(conds ...gen.Condition) IAdvertisementDo
	Limit(limit int) IAdvertisementDo
	Offset(offset int) IAdvertisementDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdvertisementDo
	Unscoped() IAdvertisementDo
	Create(values ...*model.Advertisement) error
	CreateInBatches(values []*model.Advertisement, batchSize int) error
	Save(values ...*model.Advertisement) error
	First() (*model.Advertisement, error)
	Take() (*model.Advertisement, error)
	Last() (*model.Advertisement, error)
	Find() ([]*model.Advertisement, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Advertisement, err error)
	FindInBatches(result *[]*model.Advertisement, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Advertisement) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdvertisementDo
	Assign(attrs ...field.AssignExpr) IAdvertisementDo
	Joins(fields ...field.RelationField) IAdvertisementDo
	Preload(fields ...field.RelationField) IAdvertisementDo
	FirstOrInit() (*model.Advertisement, error)
	FirstOrCreate() (*model.Advertisement, error)
	FindByPage(offset int, limit int) (result []*model.Advertisement, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdvertisementDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result model.Advertisement, err error)
	GetByName(id int64) (result model.Advertisement, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (a advertisementDo) GetByID(id int64) (result model.Advertisement, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM advertisements WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE name=@id
func (a advertisementDo) GetByName(id int64) (result model.Advertisement, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM advertisements WHERE name=? ")

	var executeSQL *gorm.DB
	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (a advertisementDo) Debug() IAdvertisementDo {
	return a.withDO(a.DO.Debug())
}

func (a advertisementDo) WithContext(ctx context.Context) IAdvertisementDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a advertisementDo) ReadDB() IAdvertisementDo {
	return a.Clauses(dbresolver.Read)
}

func (a advertisementDo) WriteDB() IAdvertisementDo {
	return a.Clauses(dbresolver.Write)
}

func (a advertisementDo) Session(config *gorm.Session) IAdvertisementDo {
	return a.withDO(a.DO.Session(config))
}

func (a advertisementDo) Clauses(conds ...clause.Expression) IAdvertisementDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a advertisementDo) Returning(value interface{}, columns ...string) IAdvertisementDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a advertisementDo) Not(conds ...gen.Condition) IAdvertisementDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a advertisementDo) Or(conds ...gen.Condition) IAdvertisementDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a advertisementDo) Select(conds ...field.Expr) IAdvertisementDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a advertisementDo) Where(conds ...gen.Condition) IAdvertisementDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a advertisementDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAdvertisementDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a advertisementDo) Order(conds ...field.Expr) IAdvertisementDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a advertisementDo) Distinct(cols ...field.Expr) IAdvertisementDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a advertisementDo) Omit(cols ...field.Expr) IAdvertisementDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a advertisementDo) Join(table schema.Tabler, on ...field.Expr) IAdvertisementDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a advertisementDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdvertisementDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a advertisementDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdvertisementDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a advertisementDo) Group(cols ...field.Expr) IAdvertisementDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a advertisementDo) Having(conds ...gen.Condition) IAdvertisementDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a advertisementDo) Limit(limit int) IAdvertisementDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a advertisementDo) Offset(offset int) IAdvertisementDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a advertisementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdvertisementDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a advertisementDo) Unscoped() IAdvertisementDo {
	return a.withDO(a.DO.Unscoped())
}

func (a advertisementDo) Create(values ...*model.Advertisement) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a advertisementDo) CreateInBatches(values []*model.Advertisement, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a advertisementDo) Save(values ...*model.Advertisement) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a advertisementDo) First() (*model.Advertisement, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Advertisement), nil
	}
}

func (a advertisementDo) Take() (*model.Advertisement, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Advertisement), nil
	}
}

func (a advertisementDo) Last() (*model.Advertisement, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Advertisement), nil
	}
}

func (a advertisementDo) Find() ([]*model.Advertisement, error) {
	result, err := a.DO.Find()
	return result.([]*model.Advertisement), err
}

func (a advertisementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Advertisement, err error) {
	buf := make([]*model.Advertisement, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a advertisementDo) FindInBatches(result *[]*model.Advertisement, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a advertisementDo) Attrs(attrs ...field.AssignExpr) IAdvertisementDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a advertisementDo) Assign(attrs ...field.AssignExpr) IAdvertisementDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a advertisementDo) Joins(fields ...field.RelationField) IAdvertisementDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a advertisementDo) Preload(fields ...field.RelationField) IAdvertisementDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a advertisementDo) FirstOrInit() (*model.Advertisement, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Advertisement), nil
	}
}

func (a advertisementDo) FirstOrCreate() (*model.Advertisement, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Advertisement), nil
	}
}

func (a advertisementDo) FindByPage(offset int, limit int) (result []*model.Advertisement, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a advertisementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a advertisementDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a advertisementDo) Delete(models ...*model.Advertisement) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *advertisementDo) withDO(do gen.Dao) *advertisementDo {
	a.DO = *do.(*gen.DO)
	return a
}
