// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"buyfree/repo/model"
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPassenger(db *gorm.DB, opts ...gen.DOOption) passenger {
	_passenger := passenger{}

	_passenger.passengerDo.UseDB(db, opts...)
	_passenger.passengerDo.UseModel(&model.Passenger{})

	tableName := _passenger.passengerDo.TableName()
	_passenger.ALL = field.NewAsterisk(tableName)
	_passenger.ID = field.NewInt64(tableName, "id")
	_passenger.CreatedAt = field.NewTime(tableName, "created_at")
	_passenger.UpdatedAt = field.NewTime(tableName, "updated_at")
	_passenger.DeletedAt = field.NewTime(tableName, "deleted_at")
	_passenger.Balance = field.NewFloat64(tableName, "balance")
	_passenger.Pic = field.NewString(tableName, "pic")
	_passenger.Name = field.NewString(tableName, "name")
	_passenger.Password = field.NewString(tableName, "password")
	_passenger.PasswordSalt = field.NewString(tableName, "password_salt")
	_passenger.Mobile = field.NewString(tableName, "mobile")
	_passenger.IDCard = field.NewString(tableName, "id_card")
	_passenger.Role = field.NewInt(tableName, "role")
	_passenger.Level = field.NewInt(tableName, "level")
	_passenger.Score = field.NewInt64(tableName, "score")
	_passenger.Cart = passengerHasOneCart{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Cart", "model.PassengerCart"),
		Products: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Cart.Products", "model.OrderProduct"),
		},
	}

	_passenger.OrderForms = passengerHasOneOrderForms{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("OrderForms", "model.PassengerOrderForm"),
		ProductInfos: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("OrderForms.ProductInfos", "model.OrderProduct"),
		},
	}

	_passenger.fillFieldMap()

	return _passenger
}

type passenger struct {
	passengerDo

	ALL          field.Asterisk
	ID           field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Time
	Balance      field.Float64
	Pic          field.String
	Name         field.String
	Password     field.String
	PasswordSalt field.String
	Mobile       field.String
	IDCard       field.String
	Role         field.Int
	Level        field.Int
	Score        field.Int64
	Cart         passengerHasOneCart

	OrderForms passengerHasOneOrderForms

	fieldMap map[string]field.Expr
}

func (p passenger) Table(newTableName string) *passenger {
	p.passengerDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p passenger) As(alias string) *passenger {
	p.passengerDo.DO = *(p.passengerDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *passenger) updateTableName(table string) *passenger {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewTime(table, "deleted_at")
	p.Balance = field.NewFloat64(table, "balance")
	p.Pic = field.NewString(table, "pic")
	p.Name = field.NewString(table, "name")
	p.Password = field.NewString(table, "password")
	p.PasswordSalt = field.NewString(table, "password_salt")
	p.Mobile = field.NewString(table, "mobile")
	p.IDCard = field.NewString(table, "id_card")
	p.Role = field.NewInt(table, "role")
	p.Level = field.NewInt(table, "level")
	p.Score = field.NewInt64(table, "score")

	p.fillFieldMap()

	return p
}

func (p *passenger) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *passenger) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 16)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["balance"] = p.Balance
	p.fieldMap["pic"] = p.Pic
	p.fieldMap["name"] = p.Name
	p.fieldMap["password"] = p.Password
	p.fieldMap["password_salt"] = p.PasswordSalt
	p.fieldMap["mobile"] = p.Mobile
	p.fieldMap["id_card"] = p.IDCard
	p.fieldMap["role"] = p.Role
	p.fieldMap["level"] = p.Level
	p.fieldMap["score"] = p.Score

}

func (p passenger) clone(db *gorm.DB) passenger {
	p.passengerDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p passenger) replaceDB(db *gorm.DB) passenger {
	p.passengerDo.ReplaceDB(db)
	return p
}

type passengerHasOneCart struct {
	db *gorm.DB

	field.RelationField

	Products struct {
		field.RelationField
	}
}

func (a passengerHasOneCart) Where(conds ...field.Expr) *passengerHasOneCart {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a passengerHasOneCart) WithContext(ctx context.Context) *passengerHasOneCart {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a passengerHasOneCart) Model(m *model.Passenger) *passengerHasOneCartTx {
	return &passengerHasOneCartTx{a.db.Model(m).Association(a.Name())}
}

type passengerHasOneCartTx struct{ tx *gorm.Association }

func (a passengerHasOneCartTx) Find() (result *model.PassengerCart, err error) {
	return result, a.tx.Find(&result)
}

func (a passengerHasOneCartTx) Append(values ...*model.PassengerCart) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a passengerHasOneCartTx) Replace(values ...*model.PassengerCart) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a passengerHasOneCartTx) Delete(values ...*model.PassengerCart) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a passengerHasOneCartTx) Clear() error {
	return a.tx.Clear()
}

func (a passengerHasOneCartTx) Count() int64 {
	return a.tx.Count()
}

type passengerHasOneOrderForms struct {
	db *gorm.DB

	field.RelationField

	ProductInfos struct {
		field.RelationField
	}
}

func (a passengerHasOneOrderForms) Where(conds ...field.Expr) *passengerHasOneOrderForms {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a passengerHasOneOrderForms) WithContext(ctx context.Context) *passengerHasOneOrderForms {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a passengerHasOneOrderForms) Model(m *model.Passenger) *passengerHasOneOrderFormsTx {
	return &passengerHasOneOrderFormsTx{a.db.Model(m).Association(a.Name())}
}

type passengerHasOneOrderFormsTx struct{ tx *gorm.Association }

func (a passengerHasOneOrderFormsTx) Find() (result *model.PassengerOrderForm, err error) {
	return result, a.tx.Find(&result)
}

func (a passengerHasOneOrderFormsTx) Append(values ...*model.PassengerOrderForm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a passengerHasOneOrderFormsTx) Replace(values ...*model.PassengerOrderForm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a passengerHasOneOrderFormsTx) Delete(values ...*model.PassengerOrderForm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a passengerHasOneOrderFormsTx) Clear() error {
	return a.tx.Clear()
}

func (a passengerHasOneOrderFormsTx) Count() int64 {
	return a.tx.Count()
}

type passengerDo struct{ gen.DO }

type IPassengerDo interface {
	gen.SubQuery
	Debug() IPassengerDo
	WithContext(ctx context.Context) IPassengerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPassengerDo
	WriteDB() IPassengerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPassengerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPassengerDo
	Not(conds ...gen.Condition) IPassengerDo
	Or(conds ...gen.Condition) IPassengerDo
	Select(conds ...field.Expr) IPassengerDo
	Where(conds ...gen.Condition) IPassengerDo
	Order(conds ...field.Expr) IPassengerDo
	Distinct(cols ...field.Expr) IPassengerDo
	Omit(cols ...field.Expr) IPassengerDo
	Join(table schema.Tabler, on ...field.Expr) IPassengerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPassengerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPassengerDo
	Group(cols ...field.Expr) IPassengerDo
	Having(conds ...gen.Condition) IPassengerDo
	Limit(limit int) IPassengerDo
	Offset(offset int) IPassengerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPassengerDo
	Unscoped() IPassengerDo
	Create(values ...*model.Passenger) error
	CreateInBatches(values []*model.Passenger, batchSize int) error
	Save(values ...*model.Passenger) error
	First() (*model.Passenger, error)
	Take() (*model.Passenger, error)
	Last() (*model.Passenger, error)
	Find() ([]*model.Passenger, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Passenger, err error)
	FindInBatches(result *[]*model.Passenger, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Passenger) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPassengerDo
	Assign(attrs ...field.AssignExpr) IPassengerDo
	Joins(fields ...field.RelationField) IPassengerDo
	Preload(fields ...field.RelationField) IPassengerDo
	FirstOrInit() (*model.Passenger, error)
	FirstOrCreate() (*model.Passenger, error)
	FindByPage(offset int, limit int) (result []*model.Passenger, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPassengerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int64) (result model.Passenger, err error)
	GetByName(name string) (result model.Passenger, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (p passengerDo) GetByID(id int64) (result model.Passenger, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM passengers WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE name=@name
func (p passengerDo) GetByName(name string) (result model.Passenger, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM passengers WHERE name=? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p passengerDo) Debug() IPassengerDo {
	return p.withDO(p.DO.Debug())
}

func (p passengerDo) WithContext(ctx context.Context) IPassengerDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p passengerDo) ReadDB() IPassengerDo {
	return p.Clauses(dbresolver.Read)
}

func (p passengerDo) WriteDB() IPassengerDo {
	return p.Clauses(dbresolver.Write)
}

func (p passengerDo) Session(config *gorm.Session) IPassengerDo {
	return p.withDO(p.DO.Session(config))
}

func (p passengerDo) Clauses(conds ...clause.Expression) IPassengerDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p passengerDo) Returning(value interface{}, columns ...string) IPassengerDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p passengerDo) Not(conds ...gen.Condition) IPassengerDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p passengerDo) Or(conds ...gen.Condition) IPassengerDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p passengerDo) Select(conds ...field.Expr) IPassengerDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p passengerDo) Where(conds ...gen.Condition) IPassengerDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p passengerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPassengerDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p passengerDo) Order(conds ...field.Expr) IPassengerDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p passengerDo) Distinct(cols ...field.Expr) IPassengerDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p passengerDo) Omit(cols ...field.Expr) IPassengerDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p passengerDo) Join(table schema.Tabler, on ...field.Expr) IPassengerDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p passengerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPassengerDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p passengerDo) RightJoin(table schema.Tabler, on ...field.Expr) IPassengerDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p passengerDo) Group(cols ...field.Expr) IPassengerDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p passengerDo) Having(conds ...gen.Condition) IPassengerDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p passengerDo) Limit(limit int) IPassengerDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p passengerDo) Offset(offset int) IPassengerDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p passengerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPassengerDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p passengerDo) Unscoped() IPassengerDo {
	return p.withDO(p.DO.Unscoped())
}

func (p passengerDo) Create(values ...*model.Passenger) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p passengerDo) CreateInBatches(values []*model.Passenger, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p passengerDo) Save(values ...*model.Passenger) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p passengerDo) First() (*model.Passenger, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Passenger), nil
	}
}

func (p passengerDo) Take() (*model.Passenger, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Passenger), nil
	}
}

func (p passengerDo) Last() (*model.Passenger, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Passenger), nil
	}
}

func (p passengerDo) Find() ([]*model.Passenger, error) {
	result, err := p.DO.Find()
	return result.([]*model.Passenger), err
}

func (p passengerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Passenger, err error) {
	buf := make([]*model.Passenger, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p passengerDo) FindInBatches(result *[]*model.Passenger, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p passengerDo) Attrs(attrs ...field.AssignExpr) IPassengerDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p passengerDo) Assign(attrs ...field.AssignExpr) IPassengerDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p passengerDo) Joins(fields ...field.RelationField) IPassengerDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p passengerDo) Preload(fields ...field.RelationField) IPassengerDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p passengerDo) FirstOrInit() (*model.Passenger, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Passenger), nil
	}
}

func (p passengerDo) FirstOrCreate() (*model.Passenger, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Passenger), nil
	}
}

func (p passengerDo) FindByPage(offset int, limit int) (result []*model.Passenger, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p passengerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p passengerDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p passengerDo) Delete(models ...*model.Passenger) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *passengerDo) withDO(do gen.Dao) *passengerDo {
	p.DO = *do.(*gen.DO)
	return p
}
