// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"buyfree/repo/model"
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPassengerCart(db *gorm.DB, opts ...gen.DOOption) passengerCart {
	_passengerCart := passengerCart{}

	_passengerCart.passengerCartDo.UseDB(db, opts...)
	_passengerCart.passengerCartDo.UseModel(&model.PassengerCart{})

	tableName := _passengerCart.passengerCartDo.TableName()
	_passengerCart.ALL = field.NewAsterisk(tableName)
	_passengerCart.PassengerID = field.NewInt64(tableName, "passenger_id")
	_passengerCart.CartID = field.NewInt64(tableName, "cart_id")
	_passengerCart.TotalCount = field.NewInt64(tableName, "total_count")
	_passengerCart.TotalAmount = field.NewFloat64(tableName, "total_amount")
	_passengerCart.Products = passengerCartHasManyProducts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Products", "model.OrderProduct"),
	}

	_passengerCart.fillFieldMap()

	return _passengerCart
}

type passengerCart struct {
	passengerCartDo

	ALL         field.Asterisk
	PassengerID field.Int64
	CartID      field.Int64
	TotalCount  field.Int64
	TotalAmount field.Float64
	Products    passengerCartHasManyProducts

	fieldMap map[string]field.Expr
}

func (p passengerCart) Table(newTableName string) *passengerCart {
	p.passengerCartDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p passengerCart) As(alias string) *passengerCart {
	p.passengerCartDo.DO = *(p.passengerCartDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *passengerCart) updateTableName(table string) *passengerCart {
	p.ALL = field.NewAsterisk(table)
	p.PassengerID = field.NewInt64(table, "passenger_id")
	p.CartID = field.NewInt64(table, "cart_id")
	p.TotalCount = field.NewInt64(table, "total_count")
	p.TotalAmount = field.NewFloat64(table, "total_amount")

	p.fillFieldMap()

	return p
}

func (p *passengerCart) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *passengerCart) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["passenger_id"] = p.PassengerID
	p.fieldMap["cart_id"] = p.CartID
	p.fieldMap["total_count"] = p.TotalCount
	p.fieldMap["total_amount"] = p.TotalAmount

}

func (p passengerCart) clone(db *gorm.DB) passengerCart {
	p.passengerCartDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p passengerCart) replaceDB(db *gorm.DB) passengerCart {
	p.passengerCartDo.ReplaceDB(db)
	return p
}

type passengerCartHasManyProducts struct {
	db *gorm.DB

	field.RelationField
}

func (a passengerCartHasManyProducts) Where(conds ...field.Expr) *passengerCartHasManyProducts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a passengerCartHasManyProducts) WithContext(ctx context.Context) *passengerCartHasManyProducts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a passengerCartHasManyProducts) Model(m *model.PassengerCart) *passengerCartHasManyProductsTx {
	return &passengerCartHasManyProductsTx{a.db.Model(m).Association(a.Name())}
}

type passengerCartHasManyProductsTx struct{ tx *gorm.Association }

func (a passengerCartHasManyProductsTx) Find() (result []*model.OrderProduct, err error) {
	return result, a.tx.Find(&result)
}

func (a passengerCartHasManyProductsTx) Append(values ...*model.OrderProduct) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a passengerCartHasManyProductsTx) Replace(values ...*model.OrderProduct) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a passengerCartHasManyProductsTx) Delete(values ...*model.OrderProduct) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a passengerCartHasManyProductsTx) Clear() error {
	return a.tx.Clear()
}

func (a passengerCartHasManyProductsTx) Count() int64 {
	return a.tx.Count()
}

type passengerCartDo struct{ gen.DO }

type IPassengerCartDo interface {
	gen.SubQuery
	Debug() IPassengerCartDo
	WithContext(ctx context.Context) IPassengerCartDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPassengerCartDo
	WriteDB() IPassengerCartDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPassengerCartDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPassengerCartDo
	Not(conds ...gen.Condition) IPassengerCartDo
	Or(conds ...gen.Condition) IPassengerCartDo
	Select(conds ...field.Expr) IPassengerCartDo
	Where(conds ...gen.Condition) IPassengerCartDo
	Order(conds ...field.Expr) IPassengerCartDo
	Distinct(cols ...field.Expr) IPassengerCartDo
	Omit(cols ...field.Expr) IPassengerCartDo
	Join(table schema.Tabler, on ...field.Expr) IPassengerCartDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPassengerCartDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPassengerCartDo
	Group(cols ...field.Expr) IPassengerCartDo
	Having(conds ...gen.Condition) IPassengerCartDo
	Limit(limit int) IPassengerCartDo
	Offset(offset int) IPassengerCartDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPassengerCartDo
	Unscoped() IPassengerCartDo
	Create(values ...*model.PassengerCart) error
	CreateInBatches(values []*model.PassengerCart, batchSize int) error
	Save(values ...*model.PassengerCart) error
	First() (*model.PassengerCart, error)
	Take() (*model.PassengerCart, error)
	Last() (*model.PassengerCart, error)
	Find() ([]*model.PassengerCart, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PassengerCart, err error)
	FindInBatches(result *[]*model.PassengerCart, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PassengerCart) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPassengerCartDo
	Assign(attrs ...field.AssignExpr) IPassengerCartDo
	Joins(fields ...field.RelationField) IPassengerCartDo
	Preload(fields ...field.RelationField) IPassengerCartDo
	FirstOrInit() (*model.PassengerCart, error)
	FirstOrCreate() (*model.PassengerCart, error)
	FindByPage(offset int, limit int) (result []*model.PassengerCart, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPassengerCartDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByCardID(id int64) (result model.PassengerCart, err error)
	GetAllCarts(driverid int64) (result []model.PassengerCart, err error)
}

// SELECT * FROM @@table WHERE cart_id=@id
func (p passengerCartDo) GetByCardID(id int64) (result model.PassengerCart, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM passenger_carts WHERE cart_id=? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(SELECT * FROM @@table where @driverid=(SELECT id from drivers where id =@driverid))
func (p passengerCartDo) GetAllCarts(driverid int64) (result []model.PassengerCart, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, driverid)
	params = append(params, driverid)
	generateSQL.WriteString("SELECT * FROM passenger_carts where ?=(SELECT id from drivers where id =?) ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p passengerCartDo) Debug() IPassengerCartDo {
	return p.withDO(p.DO.Debug())
}

func (p passengerCartDo) WithContext(ctx context.Context) IPassengerCartDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p passengerCartDo) ReadDB() IPassengerCartDo {
	return p.Clauses(dbresolver.Read)
}

func (p passengerCartDo) WriteDB() IPassengerCartDo {
	return p.Clauses(dbresolver.Write)
}

func (p passengerCartDo) Session(config *gorm.Session) IPassengerCartDo {
	return p.withDO(p.DO.Session(config))
}

func (p passengerCartDo) Clauses(conds ...clause.Expression) IPassengerCartDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p passengerCartDo) Returning(value interface{}, columns ...string) IPassengerCartDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p passengerCartDo) Not(conds ...gen.Condition) IPassengerCartDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p passengerCartDo) Or(conds ...gen.Condition) IPassengerCartDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p passengerCartDo) Select(conds ...field.Expr) IPassengerCartDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p passengerCartDo) Where(conds ...gen.Condition) IPassengerCartDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p passengerCartDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPassengerCartDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p passengerCartDo) Order(conds ...field.Expr) IPassengerCartDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p passengerCartDo) Distinct(cols ...field.Expr) IPassengerCartDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p passengerCartDo) Omit(cols ...field.Expr) IPassengerCartDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p passengerCartDo) Join(table schema.Tabler, on ...field.Expr) IPassengerCartDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p passengerCartDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPassengerCartDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p passengerCartDo) RightJoin(table schema.Tabler, on ...field.Expr) IPassengerCartDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p passengerCartDo) Group(cols ...field.Expr) IPassengerCartDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p passengerCartDo) Having(conds ...gen.Condition) IPassengerCartDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p passengerCartDo) Limit(limit int) IPassengerCartDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p passengerCartDo) Offset(offset int) IPassengerCartDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p passengerCartDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPassengerCartDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p passengerCartDo) Unscoped() IPassengerCartDo {
	return p.withDO(p.DO.Unscoped())
}

func (p passengerCartDo) Create(values ...*model.PassengerCart) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p passengerCartDo) CreateInBatches(values []*model.PassengerCart, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p passengerCartDo) Save(values ...*model.PassengerCart) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p passengerCartDo) First() (*model.PassengerCart, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PassengerCart), nil
	}
}

func (p passengerCartDo) Take() (*model.PassengerCart, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PassengerCart), nil
	}
}

func (p passengerCartDo) Last() (*model.PassengerCart, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PassengerCart), nil
	}
}

func (p passengerCartDo) Find() ([]*model.PassengerCart, error) {
	result, err := p.DO.Find()
	return result.([]*model.PassengerCart), err
}

func (p passengerCartDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PassengerCart, err error) {
	buf := make([]*model.PassengerCart, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p passengerCartDo) FindInBatches(result *[]*model.PassengerCart, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p passengerCartDo) Attrs(attrs ...field.AssignExpr) IPassengerCartDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p passengerCartDo) Assign(attrs ...field.AssignExpr) IPassengerCartDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p passengerCartDo) Joins(fields ...field.RelationField) IPassengerCartDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p passengerCartDo) Preload(fields ...field.RelationField) IPassengerCartDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p passengerCartDo) FirstOrInit() (*model.PassengerCart, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PassengerCart), nil
	}
}

func (p passengerCartDo) FirstOrCreate() (*model.PassengerCart, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PassengerCart), nil
	}
}

func (p passengerCartDo) FindByPage(offset int, limit int) (result []*model.PassengerCart, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p passengerCartDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p passengerCartDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p passengerCartDo) Delete(models ...*model.PassengerCart) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *passengerCartDo) withDO(do gen.Dao) *passengerCartDo {
	p.DO = *do.(*gen.DO)
	return p
}
