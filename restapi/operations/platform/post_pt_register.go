// Code generated by go-swagger; DO NOT EDIT.

package platform

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostPtRegisterHandlerFunc turns a function with the right signature into a post pt register handler
type PostPtRegisterHandlerFunc func(PostPtRegisterParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostPtRegisterHandlerFunc) Handle(params PostPtRegisterParams) middleware.Responder {
	return fn(params)
}

// PostPtRegisterHandler interface for that can handle valid post pt register params
type PostPtRegisterHandler interface {
	Handle(PostPtRegisterParams) middleware.Responder
}

// NewPostPtRegister creates a new http.Handler for the post pt register operation
func NewPostPtRegister(ctx *middleware.Context, handler PostPtRegisterHandler) *PostPtRegister {
	return &PostPtRegister{Context: ctx, Handler: handler}
}

/* PostPtRegister swagger:route POST /pt/register Platform postPtRegister

Register an account

Input info as model.Platform

*/
type PostPtRegister struct {
	Context *middleware.Context
	Handler PostPtRegisterHandler
}

func (o *PostPtRegister) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostPtRegisterParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
